<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>课件资源中心</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #4285f4;
            --secondary-color: #34a853;
            --accent-color: #fbbc05;
            --text-color: #333;
            --light-gray: #f5f5f5;
            --white: #ffffff;
            --shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            color: var(--text-color);
            background-color: var(--light-gray);
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }

        header {
            background: linear-gradient(135deg, var(--primary-color), #5b9aff);
            color: var(--white);
            padding: 2rem 0;
            box-shadow: var(--shadow);
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            font-size: 2rem;
            font-weight: bold;
            display: flex;
            align-items: center;
        }

        .logo i {
            margin-right: 10px;
            color: var(--accent-color);
        }

        nav ul {
            display: flex;
            list-style: none;
        }

        nav ul li {
            margin-left: 20px;
        }

        nav ul li a {
            color: var(--white);
            text-decoration: none;
            font-weight: 500;
            transition: var(--transition);
            padding: 8px 15px;
            border-radius: 4px;
        }

        nav ul li a:hover {
            background-color: rgba(255, 255, 255, 0.2);
        }

        .hero {
            text-align: center;
            padding: 3rem 0;
        }

        .hero h1 {
            font-size: 2.5rem;
            margin-bottom: 1rem;
            color: var(--white);
        }

        .hero p {
            font-size: 1.2rem;
            max-width: 800px;
            margin: 0 auto;
            color: rgba(255, 255, 255, 0.9);
        }

        main {
            padding: 2rem 0;
        }

        .repo-info {
            background-color: var(--white);
            border-radius: 8px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: var(--shadow);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .repo-details h2 {
            font-size: 1.8rem;
            margin-bottom: 0.5rem;
            color: var(--primary-color);
        }

        .repo-details p {
            color: #666;
            margin-bottom: 1rem;
        }

        .stats {
            display: flex;
            gap: 1rem;
        }

        .stat {
            display: flex;
            align-items: center;
            margin-right: 1rem;
        }

        .stat i {
            margin-right: 5px;
            color: var(--primary-color);
        }

        .settings-btn {
            background-color: var(--primary-color);
            color: var(--white);
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
            transition: var(--transition);
            display: flex;
            align-items: center;
        }

        .settings-btn i {
            margin-right: 8px;
        }

        .settings-btn:hover {
            background-color: #3367d6;
        }

        .search-bar {
            display: flex;
            margin-bottom: 2rem;
        }

        .search-bar input {
            flex: 1;
            padding: 12px 15px;
            border: 1px solid #ddd;
            border-radius: 4px 0 0 4px;
            font-size: 1rem;
        }

        .search-bar button {
            background-color: var(--primary-color);
            color: var(--white);
            border: none;
            padding: 0 20px;
            border-radius: 0 4px 4px 0;
            cursor: pointer;
            transition: var(--transition);
        }

        .search-bar button:hover {
            background-color: #3367d6;
        }

        .files-container {
            background-color: var(--white);
            border-radius: 8px;
            box-shadow: var(--shadow);
            overflow: hidden;
        }

        .files-header {
            display: grid;
            grid-template-columns: 50px 3fr 1fr 1fr 100px;
            background-color: #f0f0f0;
            padding: 1rem;
            font-weight: bold;
            border-bottom: 1px solid #ddd;
        }

        .files-list {
            max-height: 600px;
            overflow-y: auto;
        }

        .file-item {
            display: grid;
            grid-template-columns: 50px 3fr 1fr 1fr 100px;
            padding: 0.8rem 1rem;
            border-bottom: 1px solid #eee;
            align-items: center;
            transition: var(--transition);
        }

        .file-item:hover {
            background-color: #f9f9f9;
        }

        .file-item:last-child {
            border-bottom: none;
        }

        .file-icon {
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 1.2rem;
        }

        .file-icon i {
            color: var(--primary-color);
        }

        .file-icon i.fa-folder {
            color: var(--accent-color);
        }

        .file-name {
            font-weight: 500;
        }

        .file-name a {
            color: var(--text-color);
            text-decoration: none;
            transition: var(--transition);
        }

        .file-name a:hover {
            color: var(--primary-color);
        }

        .file-size, .file-date {
            color: #666;
        }

        .file-actions {
            display: flex;
            justify-content: center;
        }

        .file-actions button {
            background: none;
            border: none;
            cursor: pointer;
            color: #777;
            transition: var(--transition);
            font-size: 1rem;
            padding: 5px;
        }

        .file-actions button:hover {
            color: var(--primary-color);
        }

        .breadcrumb {
            display: flex;
            align-items: center;
            background-color: var(--white);
            padding: 12px 20px;
            border-radius: 4px;
            box-shadow: var(--shadow);
            margin-bottom: 1.5rem;
        }

        .breadcrumb a {
            color: var(--primary-color);
            text-decoration: none;
            transition: var(--transition);
        }

        .breadcrumb a:hover {
            text-decoration: underline;
        }

        .breadcrumb .separator {
            margin: 0 10px;
            color: #ccc;
        }

        .loading {
            text-align: center;
            padding: 2rem;
            color: #666;
        }

        .loading i {
            animation: spin 1s linear infinite;
            font-size: 2rem;
            color: var(--primary-color);
            margin-bottom: 1rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        footer {
            background-color: #333;
            color: var(--white);
            padding: 2rem 0;
            margin-top: 3rem;
        }

        .footer-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .footer-links ul {
            display: flex;
            list-style: none;
        }

        .footer-links ul li {
            margin-right: 20px;
        }

        .footer-links ul li a {
            color: var(--white);
            text-decoration: none;
            transition: var(--transition);
        }

        .footer-links ul li a:hover {
            color: var(--accent-color);
        }

        .copyright {
            text-align: center;
            padding-top: 1rem;
            margin-top: 1rem;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
            color: rgba(255, 255, 255, 0.6);
        }

        .empty-state {
            text-align: center;
            padding: 3rem 2rem;
            color: #666;
        }

        .empty-state i {
            font-size: 3rem;
            color: #ccc;
            margin-bottom: 1rem;
        }

        .empty-state h3 {
            margin-bottom: 1rem;
            font-size: 1.5rem;
        }

        /* 响应式设计 */
        @media (max-width: 768px) {
            .header-content {
                flex-direction: column;
            }

            nav ul {
                margin-top: 1rem;
            }

            nav ul li {
                margin-left: 10px;
                margin-right: 10px;
            }

            .repo-info {
                flex-direction: column;
                align-items: flex-start;
            }

            .settings-btn {
                margin-top: 1rem;
            }

            .files-header, .file-item {
                grid-template-columns: 40px 3fr 1fr;
            }

            .file-size, .file-actions {
                display: none;
            }

            .footer-content {
                flex-direction: column;
                text-align: center;
            }

            .footer-links ul {
                justify-content: center;
                flex-wrap: wrap;
                margin-top: 1rem;
            }

            .footer-links ul li {
                margin: 5px 10px;
            }
        }
    </style>
</head>
<body>
    <header>
        <div class="container">
            <div class="header-content">
                <div class="logo">
                    <i class="fas fa-book-open"></i>
                    <span>课件资源中心</span>
                </div>
                <nav>
                    <ul>
                        <li><a href="#" class="active"><i class="fas fa-home"></i> 首页</a></li>
                        <li><a href="#"><i class="fas fa-folder"></i> 课程分类</a></li>
                        <li><a href="#"><i class="fas fa-info-circle"></i> 关于</a></li>
                        <li><a href="#"><i class="fas fa-question-circle"></i> 帮助</a></li>
                    </ul>
                </nav>
            </div>
            <div class="hero">
                <h1>欢迎使用课件资源中心</h1>
                <p>在这里，您可以轻松访问和下载所有课程材料</p>
            </div>
        </div>
    </header>

    <main class="container">
        <div class="breadcrumb">
            <a href="#"><i class="fas fa-home"></i> 首页</a>
            <span class="separator"><i class="fas fa-chevron-right"></i></span>
            <span id="current-path">文件列表</span>
        </div>

        <div class="repo-info">
            <div class="repo-details">
                <h2 id="repo-name">课件资源仓库</h2>
                <p id="repo-description">包含所有课程的学习资料、幻灯片和文档</p>
                <div class="stats">
                    <div class="stat"><i class="fas fa-file"></i> <span id="file-count">--</span> 个文件</div>
                    <div class="stat"><i class="fas fa-folder"></i> <span id="folder-count">--</span> 个文件夹</div>
                    <div class="stat"><i class="fas fa-clock"></i> 最后更新: <span id="last-update">--</span></div>
                </div>
            </div>
            <button class="settings-btn" id="settings-btn"><i class="fas fa-cog"></i> 设置</button>
        </div>

        <div class="search-bar">
            <input type="text" placeholder="搜索文件..." id="search-input">
            <button><i class="fas fa-search"></i></button>
        </div>

        <div class="files-container">
            <div class="files-header">
                <div class="file-type"></div>
                <div class="file-name">名称</div>
                <div class="file-size">大小</div>
                <div class="file-date">修改日期</div>
                <div class="file-actions">操作</div>
            </div>
            <div class="files-list" id="files-list">
                <!-- 这里是文件列表，将通过JavaScript填充 -->
                <div class="loading">
                    <i class="fas fa-spinner"></i>
                    <p>正在加载文件...</p>
                </div>
            </div>
        </div>
    </main>

    <footer>
        <div class="container">
            <div class="footer-content">
                <div class="logo">
                    <i class="fas fa-book-open"></i>
                    <span>课件资源中心</span>
                </div>
                <div class="footer-links">
                    <ul>
                        <li><a href="#">首页</a></li>
                        <li><a href="#">关于我们</a></li>
                        <li><a href="#">联系方式</a></li>
                        <li><a href="#">使用条款</a></li>
                        <li><a href="#">隐私政策</a></li>
                    </ul>
                </div>
            </div>
            <div class="copyright">
                &copy; <span id="current-year">2025</span> 课件资源中心. 保留所有权利.
            </div>
        </div>
    </footer>

    <script>
        // 配置信息 - 在使用时请替换为您的用户名和仓库名
        const CONFIG = {
            // 修改这里为您的GitHub用户名
            username: 'Grainsgu',
            // 修改这里为您的仓库名
            repository: 'YU',
            // GitHub API根路径
            apiRoot: 'https://api.github.com',
            // 分支名称，通常是main或master
            branch: 'main',
            // 可选：如果您想只显示特定文件夹，请在这里设置路径
            basePath: '',
        };

        // 当前路径状态
        let currentPath = '';
        let filesList = [];

        // 文件图标映射
        const fileIcons = {
            // 文件夹
            'dir': 'fa-folder',
            // 文档类型
            'pdf': 'fa-file-pdf',
            'doc': 'fa-file-word',
            'docx': 'fa-file-word',
            'ppt': 'fa-file-powerpoint',
            'pptx': 'fa-file-powerpoint',
            'xls': 'fa-file-excel',
            'xlsx': 'fa-file-excel',
            'txt': 'fa-file-alt',
            'md': 'fa-file-alt',
            // 图像类型
            'jpg': 'fa-file-image',
            'jpeg': 'fa-file-image',
            'png': 'fa-file-image',
            'gif': 'fa-file-image',
            'svg': 'fa-file-image',
            // 视频类型
            'mp4': 'fa-file-video',
            'avi': 'fa-file-video',
            'mov': 'fa-file-video',
            'wmv': 'fa-file-video',
            // 音频类型
            'mp3': 'fa-file-audio',
            'wav': 'fa-file-audio',
            'ogg': 'fa-file-audio',
            // 压缩文件
            'zip': 'fa-file-archive',
            'rar': 'fa-file-archive',
            '7z': 'fa-file-archive',
            'tar': 'fa-file-archive',
            'gz': 'fa-file-archive',
            // 代码文件
            'html': 'fa-file-code',
            'css': 'fa-file-code',
            'js': 'fa-file-code',
            'py': 'fa-file-code',
            'java': 'fa-file-code',
            'c': 'fa-file-code',
            'cpp': 'fa-file-code',
            // 默认
            'default': 'fa-file'
        };

        // 格式化文件大小
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        // 格式化日期
        function formatDate(dateString) {
            const date = new Date(dateString);
            const now = new Date();
            const diff = now - date;
            
            // 如果是今天的日期，显示时间
            if (diff < 24 * 60 * 60 * 1000 && 
                date.getDate() === now.getDate() &&
                date.getMonth() === now.getMonth() &&
                date.getFullYear() === now.getFullYear()) {
                return `今天 ${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;
            }
            
            // 如果是昨天的日期
            const yesterday = new Date(now);
            yesterday.setDate(yesterday.getDate() - 1);
            if (date.getDate() === yesterday.getDate() &&
                date.getMonth() === yesterday.getMonth() &&
                date.getFullYear() === yesterday.getFullYear()) {
                return `昨天 ${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;
            }
            
            // 其他日期
            return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;
        }

        // 获取文件图标
        function getFileIcon(fileName, type) {
            if (type === 'dir') {
                return fileIcons['dir'];
            }
            
            const extension = fileName.split('.').pop().toLowerCase();
            return fileIcons[extension] || fileIcons['default'];
        }

        // 获取仓库信息
        async function getRepositoryInfo() {
            try {
                const response = await fetch(`${CONFIG.apiRoot}/repos/${CONFIG.username}/${CONFIG.repository}`);
                
                if (!response.ok) {
                    throw new Error('无法获取仓库信息');
                }
                
                const data = await response.json();
                
                document.getElementById('repo-name').textContent = data.name;
                document.getElementById('repo-description').textContent = data.description || '无描述';
                document.getElementById('last-update').textContent = formatDate(data.updated_at);
                
                // 更新页面标题
                document.title = `${data.name} - 课件资源中心`;
                
                return data;
            } catch (error) {
                console.error('获取仓库信息失败:', error);
                showError('获取仓库信息失败，请检查配置是否正确。');
            }
        }

        // 获取文件列表
        async function getFilesList(path = '') {
            try {
                const encodedPath = path ? encodeURIComponent(path) : '';
                const apiUrl = `${CONFIG.apiRoot}/repos/${CONFIG.username}/${CONFIG.repository}/contents/${encodedPath}`;
                
                document.getElementById('files-list').innerHTML = `
                    <div class="loading">
                        <i class="fas fa-spinner"></i>
                        <p>正在加载文件...</p>
                    </div>
                `;
                
                const response = await fetch(apiUrl + (CONFIG.branch ? `?ref=${CONFIG.branch}` : ''));
                
                if (!response.ok) {
                    throw new Error('无法获取文件列表');
                }
                
                const data = await response.json();
                
                // 更新当前路径
                currentPath = path;
                updateBreadcrumb();
                
                // 排序文件列表：文件夹在前，文件在后，按名称字母顺序排序
                const sortedData = data.sort((a, b) => {
                    if (a.type === b.type) {
                        return a.name.localeCompare(b.name);
                    }
                    return a.type === 'dir' ? -1 : 1;
                });
                
                filesList = sortedData;
                
                // 显示文件列表
                renderFilesList(sortedData);
                
                // 更新文件和文件夹计数
                const folderCount = sortedData.filter(item => item.type === 'dir').length;
                const fileCount = sortedData.filter(item => item.type === 'file').length;
                
                document.getElementById('folder-count').textContent = folderCount;
                document.getElementById('file-count').textContent = fileCount;
                
                return sortedData;
            } catch (error) {
                console.error('获取文件列表失败:', error);
                showError('获取文件列表失败，请检查仓库配置是否正确。');
            }
        }

        // 渲染文件列表
        function renderFilesList(files) {
            const filesList = document.getElementById('files-list');
            
            if (files.length === 0) {
                filesList.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-folder-open"></i>
                        <h3>此文件夹为空</h3>
                        <p>该文件夹中没有文件或子文件夹</p>
                    </div>
                `;
                return;
            }
            
            let html = '';
            
            // 如果不在根目录，添加返回上级目录选项
            if (currentPath) {
                html += `
                    <div class="file-item" data-type="parent-dir">
                        <div class="file-icon"><i class="fas fa-arrow-up"></i></div>
                        <div class="file-name"><a href="#" data-path="${getParentPath(currentPath)}">..</a></div>
                        <div class="file-size">-</div>
                        <div class="file-date">-</div>
                        <div class="file-actions">
                            <button title="返回上级"><i class="fas fa-arrow-up"></i></button>
                        </div>
                    </div>
                `;
            }
            
            // 添加文件和文件夹
            files.forEach(file => {
                const fileIcon = getFileIcon(file.name, file.type);
                const filePath = currentPath ? `${currentPath}/${file.name}` : file.name;
                
                // 如果是目录，添加点击事件以导航到该目录
                const fileLink = file.type === 'dir' 
                    ? `<a href="#" data-path="${filePath}">${file.name}</a>`
                    : `<a href="${file.download_url}" target="_blank">${file.name}</a>`;
                
                html += `
                    <div class="file-item" data-type="${file.type}" data-name="${file.name.toLowerCase()}">
                        <div class="file-icon"><i class="fas ${fileIcon}"></i></div>
                        <div class="file-name">${fileLink}</div>
                        <div class="file-size">${file.type === 'dir' ? '-' : formatFileSize(file.size)}</div>
                        <div class="file-date">${formatDate(file.commit?.author?.date || new Date())}</div>
                        <div class="file-actions">
                            ${file.type === 'dir' 
                                ? `<button title="打开"><i class="fas fa-folder-open"></i></button>` 
                                : `<button title="下载" onclick="window.open('${file.download_url}', '_blank')"><i class="fas fa-download"></i></button>`}
                        </div>
                    </div>
                `;
            });
            
            filesList.innerHTML = html;
            
            // 添加目录导航事件监听器
            document.querySelectorAll('.file-name a[data-path]').forEach(link => {
                link.addEventListener('click', (e) => {
                    e.preventDefault();
                    const path = link.getAttribute('data-path');
                    getFilesList(path);
                });
            });
        }

        // 获取上级目录路径
        function getParentPath(path) {
            if (!path) return '';
            const parts = path.split('/');
            parts.pop();
            return parts.join('/');
        }

        // 更新面包屑导航
        function updateBreadcrumb() {
            const currentPathElement = document.getElementById('current-path');
            
            if (!currentPath) {
                currentPathElement.innerHTML = '文件列表';
                return;
            }
            
            const pathParts = currentPath.split('/');
            let breadcrumbHtml = '';
            let currentPathBuilder = '';
            
            for (let i = 0; i < pathParts.length; i++) {
                const part = pathParts[i];
                currentPathBuilder += (i > 0 ? '/' : '') + part;
                
                if (i < pathParts.length - 1) {
                    breadcrumbHtml += `<a href="#" data-path="${currentPathBuilder}">${part}</a>`;
                    breadcrumbHtml += `<span class="separator"><i class="fas fa-chevron-right"></i></span>`;
                } else {
                    breadcrumbHtml += `<span>${part}</span>`;
                }
            }
            
            currentPathElement.innerHTML = breadcrumbHtml;
            
            // 添加面包屑导航事件监听器
            document.querySelectorAll('#current-path a[data-path]').forEach(link => {
                link.addEventListener('click', (e) => {
                    e.preventDefault();
                    const path = link.getAttribute('data-path');
                    getFilesList(path);
                });
            });
        }

        // 显示错误信息
        function showError(message) {
            document.getElementById('files-list').innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-exclamation-circle"></i>
                    <h3>出错了</h3>
                    <p>${message}</p>
                </div>
            `;
        }

        // 搜索文件
        function searchFiles() {
            const searchTerm = document.getElementById('search-input').value.toLowerCase();
            
            if (!searchTerm) {
                renderFilesList(filesList);
                return;
            }
            
            const filteredFiles = filesList.filter(file => 
                file.name.toLowerCase().includes(searchTerm)
            );
            
            renderFilesList(filteredFiles);
        }

        // 页面加载完成后初始化
        document.addEventListener('DOMContentLoaded', () => {
            // 设置当前年份
            document.getElementById('current-year').textContent = new Date().getFullYear();
            
            // 加载仓库信息
            getRepositoryInfo().then(() => {
                // 加载文件列表
                getFilesList(CONFIG.basePath);
            });
            
            // 添加搜索功能
            document.getElementById('search-input').addEventListener('input', searchFiles);
            
            // 设置按钮事件
            document.getElementById('settings-btn').addEventListener('click', () => {
                alert('设置功能将在后续版本中提供');
            });
        });
    </script>
</body>
</html>
